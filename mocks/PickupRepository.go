// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// PickupRepository is an autogenerated mock type for the PickupRepository type
type PickupRepository struct {
	mock.Mock
}

// CreatePickup provides a mock function with given fields: u
func (_m *PickupRepository) CreatePickup(u entity.Pickup) (*entity.Pickup, error) {
	ret := _m.Called(u)

	var r0 *entity.Pickup
	if rf, ok := ret.Get(0).(func(entity.Pickup) *entity.Pickup); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Pickup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Pickup) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPickups provides a mock function with given fields: page, limit, sortBy, sort, searchBy, filterByStatus
func (_m *PickupRepository) GetPickups(page int, limit int, sortBy string, sort string, searchBy string, filterByStatus int) ([]entity.Pickup, int, error) {
	ret := _m.Called(page, limit, sortBy, sort, searchBy, filterByStatus)

	var r0 []entity.Pickup
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, int) []entity.Pickup); ok {
		r0 = rf(page, limit, sortBy, sort, searchBy, filterByStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pickup)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int, string, string, string, int) int); ok {
		r1 = rf(page, limit, sortBy, sort, searchBy, filterByStatus)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, string, string, string, int) error); ok {
		r2 = rf(page, limit, sortBy, sort, searchBy, filterByStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateStatus provides a mock function with given fields: id, status
func (_m *PickupRepository) UpdateStatus(id int, status int) (*entity.Pickup, error) {
	ret := _m.Called(id, status)

	var r0 *entity.Pickup
	if rf, ok := ret.Get(0).(func(int, int) *entity.Pickup); ok {
		r0 = rf(id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Pickup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPickupRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPickupRepository creates a new instance of PickupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPickupRepository(t mockConstructorTestingTNewPickupRepository) *PickupRepository {
	mock := &PickupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
