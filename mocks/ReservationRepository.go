// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// ReservationRepository is an autogenerated mock type for the ReservationRepository type
type ReservationRepository struct {
	mock.Mock
}

// CreateReservation provides a mock function with given fields: u
func (_m *ReservationRepository) CreateReservation(u entity.Reservation) (*entity.Reservation, error) {
	ret := _m.Called(u)

	var r0 *entity.Reservation
	if rf, ok := ret.Get(0).(func(entity.Reservation) *entity.Reservation); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Reservation) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookedDatesByHouseID provides a mock function with given fields: houseID
func (_m *ReservationRepository) GetBookedDatesByHouseID(houseID int) ([]string, error) {
	ret := _m.Called(houseID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(houseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(houseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationByBookingCode provides a mock function with given fields: code
func (_m *ReservationRepository) GetReservationByBookingCode(code string) (*entity.Reservation, error) {
	ret := _m.Called(code)

	var r0 *entity.Reservation
	if rf, ok := ret.Get(0).(func(string) *entity.Reservation); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationById provides a mock function with given fields: id
func (_m *ReservationRepository) GetReservationById(id int) (*entity.Reservation, error) {
	ret := _m.Called(id)

	var r0 *entity.Reservation
	if rf, ok := ret.Get(0).(func(int) *entity.Reservation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationByUserID provides a mock function with given fields: userId
func (_m *ReservationRepository) GetReservationByUserID(userId int) ([]*entity.Reservation, error) {
	ret := _m.Called(userId)

	var r0 []*entity.Reservation
	if rf, ok := ret.Get(0).(func(int) []*entity.Reservation); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsHouseAvailable provides a mock function with given fields: checkinDate, checkoutDate, houseID
func (_m *ReservationRepository) IsHouseAvailable(checkinDate string, checkoutDate string, houseID int) (bool, error) {
	ret := _m.Called(checkinDate, checkoutDate, houseID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int) bool); ok {
		r0 = rf(checkinDate, checkoutDate, houseID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(checkinDate, checkoutDate, houseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id, status
func (_m *ReservationRepository) UpdateStatus(id int, status int) (*entity.Reservation, error) {
	ret := _m.Called(id, status)

	var r0 *entity.Reservation
	if rf, ok := ret.Get(0).(func(int, int) *entity.Reservation); ok {
		r0 = rf(id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReservationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReservationRepository creates a new instance of ReservationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReservationRepository(t mockConstructorTestingTNewReservationRepository) *ReservationRepository {
	mock := &ReservationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
