// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// HousePhotoUsecase is an autogenerated mock type for the HousePhotoUsecase type
type HousePhotoUsecase struct {
	mock.Mock
}

// CreateHousePhoto provides a mock function with given fields: r
func (_m *HousePhotoUsecase) CreateHousePhoto(r dto.CreateHousePhotoRequest) (*dto.CreateHousePhotoResponse, error) {
	ret := _m.Called(r)

	var r0 *dto.CreateHousePhotoResponse
	if rf, ok := ret.Get(0).(func(dto.CreateHousePhotoRequest) *dto.CreateHousePhotoResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateHousePhotoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreateHousePhotoRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHousePhoto provides a mock function with given fields: houseId
func (_m *HousePhotoUsecase) DeleteHousePhoto(houseId int) error {
	ret := _m.Called(houseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(houseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHousePhotoUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewHousePhotoUsecase creates a new instance of HousePhotoUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHousePhotoUsecase(t mockConstructorTestingTNewHousePhotoUsecase) *HousePhotoUsecase {
	mock := &HousePhotoUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
