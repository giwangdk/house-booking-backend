// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project-backend/dto"
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// GameUsecase is an autogenerated mock type for the GameUsecase type
type GameUsecase struct {
	mock.Mock
}

// CreateGame provides a mock function with given fields: userID
func (_m *GameUsecase) CreateGame(userID int) (*entity.Game, error) {
	ret := _m.Called(userID)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(int) *entity.Game); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecreaseChance provides a mock function with given fields: chance, Game
func (_m *GameUsecase) DecreaseChance(chance int, Game entity.Game) (*entity.Game, error) {
	ret := _m.Called(chance, Game)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(int, entity.Game) *entity.Game); ok {
		r0 = rf(chance, Game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entity.Game) error); ok {
		r1 = rf(chance, Game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameByUserID provides a mock function with given fields: userId
func (_m *GameUsecase) GetGameByUserID(userId int) (*dto.GameDetail, error) {
	ret := _m.Called(userId)

	var r0 *dto.GameDetail
	if rf, ok := ret.Get(0).(func(int) *dto.GameDetail); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GameDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseChance provides a mock function with given fields: chance, Game
func (_m *GameUsecase) IncreaseChance(chance int, Game entity.Game) (*entity.Game, error) {
	ret := _m.Called(chance, Game)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(int, entity.Game) *entity.Game); ok {
		r0 = rf(chance, Game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entity.Game) error); ok {
		r1 = rf(chance, Game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGame provides a mock function with given fields: userId, req
func (_m *GameUsecase) UpdateGame(userId int, req dto.PlayGame) (*entity.Game, error) {
	ret := _m.Called(userId, req)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(int, dto.PlayGame) *entity.Game); ok {
		r0 = rf(userId, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, dto.PlayGame) error); ok {
		r1 = rf(userId, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameUsecase creates a new instance of GameUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameUsecase(t mockConstructorTestingTNewGameUsecase) *GameUsecase {
	mock := &GameUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
