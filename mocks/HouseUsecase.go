// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// HouseUsecase is an autogenerated mock type for the HouseUsecase type
type HouseUsecase struct {
	mock.Mock
}

// CreateHouse provides a mock function with given fields: r
func (_m *HouseUsecase) CreateHouse(r dto.CreateHouseRequest) (*dto.CreateHouseResponse, error) {
	ret := _m.Called(r)

	var r0 *dto.CreateHouseResponse
	if rf, ok := ret.Get(0).(func(dto.CreateHouseRequest) *dto.CreateHouseResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateHouseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreateHouseRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHouse provides a mock function with given fields: houseId
func (_m *HouseUsecase) DeleteHouse(houseId int) error {
	ret := _m.Called(houseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(houseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHouseById provides a mock function with given fields: houseId
func (_m *HouseUsecase) GetHouseById(houseId int) (*dto.House, error) {
	ret := _m.Called(houseId)

	var r0 *dto.House
	if rf, ok := ret.Get(0).(func(int) *dto.House); ok {
		r0 = rf(houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.House)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(houseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHouses provides a mock function with given fields: page, limit, sortBy, sort, searchBy, filterByCity, checkin, checkout
func (_m *HouseUsecase) GetHouses(page int, limit int, sortBy string, sort string, searchBy string, filterByCity int, checkin string, checkout string) (*dto.HouseLists, error) {
	ret := _m.Called(page, limit, sortBy, sort, searchBy, filterByCity, checkin, checkout)

	var r0 *dto.HouseLists
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, int, string, string) *dto.HouseLists); ok {
		r0 = rf(page, limit, sortBy, sort, searchBy, filterByCity, checkin, checkout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.HouseLists)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string, string, int, string, string) error); ok {
		r1 = rf(page, limit, sortBy, sort, searchBy, filterByCity, checkin, checkout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHousesHost provides a mock function with given fields: userId, page, limit, sortBy, sort, searchBy
func (_m *HouseUsecase) GetHousesHost(userId int, page int, limit int, sortBy string, sort string, searchBy string) (*dto.HouseLists, error) {
	ret := _m.Called(userId, page, limit, sortBy, sort, searchBy)

	var r0 *dto.HouseLists
	if rf, ok := ret.Get(0).(func(int, int, int, string, string, string) *dto.HouseLists); ok {
		r0 = rf(userId, page, limit, sortBy, sort, searchBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.HouseLists)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, string, string, string) error); ok {
		r1 = rf(userId, page, limit, sortBy, sort, searchBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHouse provides a mock function with given fields: r, houseId
func (_m *HouseUsecase) UpdateHouse(r dto.UpdateHouseRequest, houseId int) (*dto.UpdateHouseResponse, error) {
	ret := _m.Called(r, houseId)

	var r0 *dto.UpdateHouseResponse
	if rf, ok := ret.Get(0).(func(dto.UpdateHouseRequest, int) *dto.UpdateHouseResponse); ok {
		r0 = rf(r, houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UpdateHouseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.UpdateHouseRequest, int) error); ok {
		r1 = rf(r, houseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHouseUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewHouseUsecase creates a new instance of HouseUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHouseUsecase(t mockConstructorTestingTNewHouseUsecase) *HouseUsecase {
	mock := &HouseUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
