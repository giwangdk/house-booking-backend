// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// HouseDetailRepository is an autogenerated mock type for the HouseDetailRepository type
type HouseDetailRepository struct {
	mock.Mock
}

// CreateHouseDetail provides a mock function with given fields: u
func (_m *HouseDetailRepository) CreateHouseDetail(u entity.HouseDetail) (*entity.HouseDetail, error) {
	ret := _m.Called(u)

	var r0 *entity.HouseDetail
	if rf, ok := ret.Get(0).(func(entity.HouseDetail) *entity.HouseDetail); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.HouseDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.HouseDetail) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHouseDetailById provides a mock function with given fields: id
func (_m *HouseDetailRepository) GetHouseDetailById(id int) (*entity.HouseDetail, error) {
	ret := _m.Called(id)

	var r0 *entity.HouseDetail
	if rf, ok := ret.Get(0).(func(int) *entity.HouseDetail); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.HouseDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHouseDetail provides a mock function with given fields: u, houseId
func (_m *HouseDetailRepository) UpdateHouseDetail(u entity.HouseDetail, houseId int) (*entity.HouseDetail, error) {
	ret := _m.Called(u, houseId)

	var r0 *entity.HouseDetail
	if rf, ok := ret.Get(0).(func(entity.HouseDetail, int) *entity.HouseDetail); ok {
		r0 = rf(u, houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.HouseDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.HouseDetail, int) error); ok {
		r1 = rf(u, houseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHouseDetailRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewHouseDetailRepository creates a new instance of HouseDetailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHouseDetailRepository(t mockConstructorTestingTNewHouseDetailRepository) *HouseDetailRepository {
	mock := &HouseDetailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
