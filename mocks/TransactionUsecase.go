// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// TransactionUsecase is an autogenerated mock type for the TransactionUsecase type
type TransactionUsecase struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: r
func (_m *TransactionUsecase) CreateTransaction(r dto.CreateTransactionRequest) (*dto.CreateTransactionResponse, error) {
	ret := _m.Called(r)

	var r0 *dto.CreateTransactionResponse
	if rf, ok := ret.Get(0).(func(dto.CreateTransactionRequest) *dto.CreateTransactionResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateTransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreateTransactionRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransactionRequestGuest provides a mock function with given fields: r
func (_m *TransactionUsecase) CreateTransactionRequestGuest(r dto.CreateTransactionRequest) (*dto.CreateTransactionResponse, error) {
	ret := _m.Called(r)

	var r0 *dto.CreateTransactionResponse
	if rf, ok := ret.Get(0).(func(dto.CreateTransactionRequest) *dto.CreateTransactionResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateTransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreateTransactionRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsGuest provides a mock function with given fields:
func (_m *TransactionUsecase) GetTransactionsGuest() (*dto.TransactionLits, error) {
	ret := _m.Called()

	var r0 *dto.TransactionLits
	if rf, ok := ret.Get(0).(func() *dto.TransactionLits); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransactionLits)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsUser provides a mock function with given fields: userId
func (_m *TransactionUsecase) GetTransactionsUser(userId int) (*dto.TransactionLits, error) {
	ret := _m.Called(userId)

	var r0 *dto.TransactionLits
	if rf, ok := ret.Get(0).(func(int) *dto.TransactionLits); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransactionLits)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionUsecase creates a new instance of TransactionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionUsecase(t mockConstructorTestingTNewTransactionUsecase) *TransactionUsecase {
	mock := &TransactionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
