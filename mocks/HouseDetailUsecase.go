// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// HouseDetailUsecase is an autogenerated mock type for the HouseDetailUsecase type
type HouseDetailUsecase struct {
	mock.Mock
}

// CreateHouseDetail provides a mock function with given fields: r
func (_m *HouseDetailUsecase) CreateHouseDetail(r dto.CreateHouseDetailRequest) (*dto.CreateHouseDetailResponse, error) {
	ret := _m.Called(r)

	var r0 *dto.CreateHouseDetailResponse
	if rf, ok := ret.Get(0).(func(dto.CreateHouseDetailRequest) *dto.CreateHouseDetailResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateHouseDetailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreateHouseDetailRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHouseDetailById provides a mock function with given fields: houseDetailId
func (_m *HouseDetailUsecase) GetHouseDetailById(houseDetailId int) (*dto.HouseDetail, error) {
	ret := _m.Called(houseDetailId)

	var r0 *dto.HouseDetail
	if rf, ok := ret.Get(0).(func(int) *dto.HouseDetail); ok {
		r0 = rf(houseDetailId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.HouseDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(houseDetailId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHouseDetail provides a mock function with given fields: r, houseDetailId
func (_m *HouseDetailUsecase) UpdateHouseDetail(r dto.UpdateHouseDetailRequest, houseDetailId int) (*dto.UpdateHouseDetailResponse, error) {
	ret := _m.Called(r, houseDetailId)

	var r0 *dto.UpdateHouseDetailResponse
	if rf, ok := ret.Get(0).(func(dto.UpdateHouseDetailRequest, int) *dto.UpdateHouseDetailResponse); ok {
		r0 = rf(r, houseDetailId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UpdateHouseDetailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.UpdateHouseDetailRequest, int) error); ok {
		r1 = rf(r, houseDetailId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHouseDetailUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewHouseDetailUsecase creates a new instance of HouseDetailUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHouseDetailUsecase(t mockConstructorTestingTNewHouseDetailUsecase) *HouseDetailUsecase {
	mock := &HouseDetailUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
