// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// WalletTransactionRepository is an autogenerated mock type for the WalletTransactionRepository type
type WalletTransactionRepository struct {
	mock.Mock
}

// CreateWalletTransaction provides a mock function with given fields: u
func (_m *WalletTransactionRepository) CreateWalletTransaction(u entity.WalletTransaction) (*entity.WalletTransaction, error) {
	ret := _m.Called(u)

	var r0 *entity.WalletTransaction
	if rf, ok := ret.Get(0).(func(entity.WalletTransaction) *entity.WalletTransaction); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WalletTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.WalletTransaction) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletTransactions provides a mock function with given fields: s, sortBy, sort, limit, page
func (_m *WalletTransactionRepository) GetWalletTransactions(s string, sortBy string, sort string, limit int, page int) (*[]entity.WalletTransaction, error) {
	ret := _m.Called(s, sortBy, sort, limit, page)

	var r0 *[]entity.WalletTransaction
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) *[]entity.WalletTransaction); ok {
		r0 = rf(s, sortBy, sort, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.WalletTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(s, sortBy, sort, limit, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletTransactionsUser provides a mock function with given fields: walletID
func (_m *WalletTransactionRepository) GetWalletTransactionsUser(walletID int) (*[]entity.WalletTransaction, error) {
	ret := _m.Called(walletID)

	var r0 *[]entity.WalletTransaction
	if rf, ok := ret.Get(0).(func(int) *[]entity.WalletTransaction); ok {
		r0 = rf(walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.WalletTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletTransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletTransactionRepository creates a new instance of WalletTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletTransactionRepository(t mockConstructorTestingTNewWalletTransactionRepository) *WalletTransactionRepository {
	mock := &WalletTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
