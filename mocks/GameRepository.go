// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// GameRepository is an autogenerated mock type for the GameRepository type
type GameRepository struct {
	mock.Mock
}

// CreateGame provides a mock function with given fields: userId
func (_m *GameRepository) CreateGame(userId int) (*entity.Game, error) {
	ret := _m.Called(userId)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(int) *entity.Game); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecreaseChance provides a mock function with given fields: chance, Game
func (_m *GameRepository) DecreaseChance(chance int, Game entity.Game) (*entity.Game, error) {
	ret := _m.Called(chance, Game)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(int, entity.Game) *entity.Game); ok {
		r0 = rf(chance, Game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entity.Game) error); ok {
		r1 = rf(chance, Game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameByUserID provides a mock function with given fields: userId
func (_m *GameRepository) GetGameByUserID(userId int) (*entity.Game, error) {
	ret := _m.Called(userId)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(int) *entity.Game); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseChance provides a mock function with given fields: chance, Game
func (_m *GameRepository) IncreaseChance(chance int, Game entity.Game) (*entity.Game, error) {
	ret := _m.Called(chance, Game)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(int, entity.Game) *entity.Game); ok {
		r0 = rf(chance, Game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entity.Game) error); ok {
		r1 = rf(chance, Game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseTotalGamesPlayed provides a mock function with given fields: Game
func (_m *GameRepository) IncreaseTotalGamesPlayed(Game entity.Game) (*entity.Game, error) {
	ret := _m.Called(Game)

	var r0 *entity.Game
	if rf, ok := ret.Get(0).(func(entity.Game) *entity.Game); ok {
		r0 = rf(Game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Game) error); ok {
		r1 = rf(Game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameRepository creates a new instance of GameRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameRepository(t mockConstructorTestingTNewGameRepository) *GameRepository {
	mock := &GameRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
