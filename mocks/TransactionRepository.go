// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: u
func (_m *TransactionRepository) CreateTransaction(u entity.Transaction) (*entity.Transaction, error) {
	ret := _m.Called(u)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(entity.Transaction) *entity.Transaction); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Transaction) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByBookingCode provides a mock function with given fields: bookingCode
func (_m *TransactionRepository) GetTransactionByBookingCode(bookingCode string) (*entity.Transaction, error) {
	ret := _m.Called(bookingCode)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(string) *entity.Transaction); ok {
		r0 = rf(bookingCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bookingCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepository(t mockConstructorTestingTNewTransactionRepository) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
